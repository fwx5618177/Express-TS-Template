 # 性能和负载测试
# baseURL
@baseURL = http://localhost:3000

# 性能测试变量
@testEmail = perf-test@example.com
@testPassword = PerfTest123

###
# 1. 基准测试 - 简单 GET 请求
GET {{baseURL}}/users

###
# 2. 基准测试 - 带参数的 GET 请求
GET {{baseURL}}/users/1

###
# 3. 基准测试 - POST 请求
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "{{testPassword}}"
}

###
# 4. 并发测试 - 10 个并发 GET 请求
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
# 5. 大数据量测试 - 创建大量用户
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "bulk-test-1@example.com",
    "password": "{{testPassword}}"
}

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "bulk-test-2@example.com",
    "password": "{{testPassword}}"
}

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "bulk-test-3@example.com",
    "password": "{{testPassword}}"
}

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "bulk-test-4@example.com",
    "password": "{{testPassword}}"
}

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "bulk-test-5@example.com",
    "password": "{{testPassword}}"
}

###
# 6. 内存使用测试 - 大对象
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "memory-test@example.com",
    "password": "{{testPassword}}",
    "metadata": {
        "largeField": "{{$randomLoremParagraphs 50}}"
    }
}

###
# 7. CPU 密集测试 - 复杂查询
GET {{baseURL}}/users?search=complex&sort=email&filter=active&page=1&limit=100

###
# 8. I/O 密集测试 - 多个数据库查询
GET {{baseURL}}/users

###
GET {{baseURL}}/users/1

###
GET {{baseURL}}/users/2

###
GET {{baseURL}}/users/3

###
# 9. 缓存测试 - 重复请求相同数据
GET {{baseURL}}/users/1

###
GET {{baseURL}}/users/1

###
GET {{baseURL}}/users/1

###
GET {{baseURL}}/users/1

###
GET {{baseURL}}/users/1

###
# 10. 长连接测试 - 保持连接
GET {{baseURL}}/users
Connection: keep-alive

###
GET {{baseURL}}/users/1
Connection: keep-alive

###
GET {{baseURL}}/users/2
Connection: keep-alive

###
# 11. 短连接测试 - 关闭连接
GET {{baseURL}}/users
Connection: close

###
GET {{baseURL}}/users/1
Connection: close

###
# 12. 压缩测试 - 请求压缩响应
GET {{baseURL}}/users
Accept-Encoding: gzip, deflate, br

###
# 13. 分页性能测试 - 大页面
GET {{baseURL}}/users?page=1&limit=1000

###
# 14. 分页性能测试 - 深度分页
GET {{baseURL}}/users?page=100&limit=10

###
# 15. 排序性能测试
GET {{baseURL}}/users?sort=email&order=asc

###
GET {{baseURL}}/users?sort=email&order=desc

###
# 16. 过滤性能测试
GET {{baseURL}}/users?filter=active

###
# 17. 搜索性能测试
GET {{baseURL}}/users?search=test

###
# 18. 复合查询性能测试
GET {{baseURL}}/users?search=test&sort=email&filter=active&page=1&limit=50

###
# 19. GraphQL 性能测试 - 简单查询
POST {{baseURL}}/graphql
Content-Type: application/json

{
    "query": "query { listPosts { id title } }"
}

###
# 20. GraphQL 性能测试 - 复杂查询
POST {{baseURL}}/graphql
Content-Type: application/json

{
    "query": "query { listPosts { id title content } }"
}

###
# 21. GraphQL 性能测试 - 嵌套查询
POST {{baseURL}}/graphql
Content-Type: application/json

{
    "query": "query { listPosts { id title content } }"
}

###
# 22. 认证性能测试 - 登录
POST {{baseURL}}/login
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "{{testPassword}}"
}

###
# 23. 认证性能测试 - 注册
POST {{baseURL}}/signup
Content-Type: application/json

{
    "email": "perf-signup@example.com",
    "password": "{{testPassword}}"
}

###
# 24. 错误处理性能测试
GET {{baseURL}}/users/invalid-id

###
# 25. 混合负载测试
GET {{baseURL}}/users

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "mixed-load@example.com",
    "password": "{{testPassword}}"
}

###
PUT {{baseURL}}/users/1
Content-Type: application/json

{
    "email": "updated-mixed@example.com",
    "password": "{{testPassword}}"
}

###
DELETE {{baseURL}}/users/999

###
# 26. API 文档性能测试
GET {{baseURL}}/api

###
# 27. 健康检查性能测试
GET {{baseURL}}/

###
# 28. 静态资源性能测试（如果有）
GET {{baseURL}}/favicon.ico

###
# 29. 超时测试 - 模拟慢请求
GET {{baseURL}}/users?delay=5000

###
# 30. 内存泄漏测试 - 重复创建和删除
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "memory-leak-test@example.com",
    "password": "{{testPassword}}"
}

###
DELETE {{baseURL}}/users/1

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "memory-leak-test-2@example.com",
    "password": "{{testPassword}}"
}

###
DELETE {{baseURL}}/users/2