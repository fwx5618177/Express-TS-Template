 # 错误场景和边界条件测试
# baseURL
@baseURL = http://localhost:3000

###
# 1. 测试 400 Bad Request - 无效 JSON
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test@example.com"
    "password": "password"  // 缺少逗号
}

###
# 2. 测试 400 Bad Request - 空 JSON 对象
POST {{baseURL}}/users
Content-Type: application/json

{}

###
# 3. 测试 400 Bad Request - 数据类型错误
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": 12345,
    "password": true
}

###
# 4. 测试 401 Unauthorized - 无 token
POST {{baseURL}}/logout

###
# 5. 测试 401 Unauthorized - 错误 token 格式
POST {{baseURL}}/logout
Authorization: InvalidTokenFormat

###
# 6. 测试 401 Unauthorized - 过期 token
POST {{baseURL}}/logout
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjF9.expired

###
# 7. 测试 403 Forbidden - 权限不足
GET {{baseURL}}/admin/users

###
# 8. 测试 404 Not Found - 不存在的用户
GET {{baseURL}}/users/999999

###
# 9. 测试 404 Not Found - 无效路径
GET {{baseURL}}/invalid/path

###
# 10. 测试 405 Method Not Allowed
PATCH {{baseURL}}/users

###
# 11. 测试 406 Not Acceptable - 不支持的 Accept 类型
GET {{baseURL}}/users
Accept: application/xml

###
# 12. 测试 409 Conflict - 重复创建
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "existing@example.com",
    "password": "password"
}

###
# 13. 测试 413 Payload Too Large - 超大请求体
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "{{$randomAlphaNumeric 10000}}"
}

###
# 14. 测试 415 Unsupported Media Type
POST {{baseURL}}/users
Content-Type: application/xml

<user>
    <email>test@example.com</email>
    <password>password</password>
</user>

###
# 15. 测试 422 Unprocessable Entity - 验证失败
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "invalid-email",
    "password": "123"
}

###
# 16. 测试 429 Too Many Requests - API 限流
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
GET {{baseURL}}/users

###
# 17. 测试 500 Internal Server Error - 触发服务器错误
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "trigger-error@example.com",
    "password": "password",
    "triggerError": true
}

###
# 18. 测试 SQL 注入攻击
GET {{baseURL}}/users/1; DROP TABLE users; --

###
# 19. 测试 XSS 攻击
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "<script>alert('XSS')</script>@example.com",
    "password": "password"
}

###
# 20. 测试 CSRF 攻击模拟
POST {{baseURL}}/users
Content-Type: application/json
Referer: http://malicious-site.com

{
    "email": "csrf-test@example.com",
    "password": "password"
}

###
# 21. 测试路径遍历攻击
GET {{baseURL}}/../../../etc/passwd

###
# 22. 测试目录遍历攻击
GET {{baseURL}}/users/../../admin

###
# 23. 测试头部注入
GET {{baseURL}}/users
X-Injected-Header: test
Injected-Header: injected

###
# 24. 测试超长头部
GET {{baseURL}}/users
X-Long-Header: {{$randomAlphaNumeric 8192}}

###
# 25. 测试特殊字符注入
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test+special%40example.com",
    "password": "password\n\r\t"
}

###
# 26. 测试 Unicode 字符
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "测试@example.com",
    "password": "密码123"
}

###
# 27. 测试 NULL 字符注入
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test\0@example.com",
    "password": "password"
}

###
# 28. 测试超长 URL
GET {{baseURL}}/users?{{$randomAlphaNumeric 2000}}={{$randomAlphaNumeric 2000}}

###
# 29. 测试负数 ID
GET {{baseURL}}/users/-1

###
# 30. 测试浮点数 ID
GET {{baseURL}}/users/1.5

###
# 31. 测试布尔值 ID
GET {{baseURL}}/users/true

###
# 32. 测试数组作为 ID
GET {{baseURL}}/users/[1,2,3]

###
# 33. 测试对象作为 ID
GET {{baseURL}}/users/{"id":1}

###
# 34. 测试空白字符 ID
GET {{baseURL}}/users/ 

###
# 35. 测试连续斜杠
GET {{baseURL}}//users///1

###
# 36. 测试编码字符
GET {{baseURL}}/users/%31

###
# 37. 测试双重编码
GET {{baseURL}}/users/%2531

###
# 38. 测试无效编码
GET {{baseURL}}/users/%ZZ

###
# 39. 测试超时场景 - 慢查询
GET {{baseURL}}/users?slow=true

###
# 40. 测试并发冲突 - 同时修改同一资源
PUT {{baseURL}}/users/1
Content-Type: application/json

{
    "email": "concurrent1@example.com",
    "password": "password"
}

###
PUT {{baseURL}}/users/1
Content-Type: application/json

{
    "email": "concurrent2@example.com",
    "password": "password"
}

###
# 41. 测试循环引用 JSON
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "password",
    "self": "{{$ref}}"
}

###
# 42. 测试深度嵌套 JSON
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "password",
    "nested": {
        "level1": {
            "level2": {
                "level3": {
                    "level4": {
                        "level5": "deep"
                    }
                }
            }
        }
    }
}

###
# 43. 测试非 UTF-8 编码
POST {{baseURL}}/users
Content-Type: application/json; charset=iso-8859-1

{
    "email": "test@example.com",
    "password": "password"
}

###
# 44. 测试带 BOM 的 UTF-8
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "password"
}

###
# 45. 测试数据库连接失败场景
GET {{baseURL}}/users?simulateDbError=true