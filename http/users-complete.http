 # 用户管理接口完整测试
# baseURL
@baseURL = http://localhost:3000

# 测试数据
@testUserId = 1
@nonExistentUserId = 99999
@testEmail = user-test@example.com
@testPassword = TestPassword123
@updatedEmail = updated-user@example.com
@updatedPassword = UpdatedPassword123

# 用于存储创建的用户ID
@createdUserId = {{createUser.response.body.id}}

###
# 1. 获取所有用户 - 正常情况
GET {{baseURL}}/users

###
# 2. 获取所有用户 - 带查询参数 (如果支持分页)
GET {{baseURL}}/users?page=1&limit=10

###
# 3. 根据ID获取用户 - 正常情况
GET {{baseURL}}/users/{{testUserId}}

###
# 4. 根据ID获取用户 - 不存在的ID
GET {{baseURL}}/users/{{nonExistentUserId}}

###
# 5. 根据ID获取用户 - 无效的ID格式
GET {{baseURL}}/users/invalid-id

###
# 6. 根据ID获取用户 - 负数ID
GET {{baseURL}}/users/-1

###
# 7. 根据ID获取用户 - 0值ID
GET {{baseURL}}/users/0

###
# 8. 创建用户 - 正常情况
# @name createUser
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "{{testPassword}}"
}

###
# 9. 创建用户 - 邮箱格式错误
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "invalid-email-format",
    "password": "{{testPassword}}"
}

###
# 10. 创建用户 - 缺少邮箱
POST {{baseURL}}/users
Content-Type: application/json

{
    "password": "{{testPassword}}"
}

###
# 11. 创建用户 - 缺少密码
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "{{testEmail}}"
}

###
# 12. 创建用户 - 空字段
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "",
    "password": ""
}

###
# 13. 创建用户 - 重复邮箱
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "{{testPassword}}"
}

###
# 14. 创建用户 - 超长邮箱
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "very-very-very-very-very-very-very-very-very-very-very-very-long-email-address-that-might-exceed-database-limits@example.com",
    "password": "{{testPassword}}"
}

###
# 15. 创建用户 - 特殊字符邮箱
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "test+special.email@example-domain.com",
    "password": "{{testPassword}}"
}

###
# 16. 更新用户 - 正常情况
PUT {{baseURL}}/users/{{testUserId}}
Content-Type: application/json

{
    "email": "{{updatedEmail}}",
    "password": "{{updatedPassword}}"
}

###
# 17. 更新用户 - 只更新邮箱
PUT {{baseURL}}/users/{{testUserId}}
Content-Type: application/json

{
    "email": "{{updatedEmail}}"
}

###
# 18. 更新用户 - 只更新密码
PUT {{baseURL}}/users/{{testUserId}}
Content-Type: application/json

{
    "password": "{{updatedPassword}}"
}

###
# 19. 更新用户 - 不存在的用户ID
PUT {{baseURL}}/users/{{nonExistentUserId}}
Content-Type: application/json

{
    "email": "{{updatedEmail}}",
    "password": "{{updatedPassword}}"
}

###
# 20. 更新用户 - 无效的用户ID
PUT {{baseURL}}/users/invalid-id
Content-Type: application/json

{
    "email": "{{updatedEmail}}",
    "password": "{{updatedPassword}}"
}

###
# 21. 更新用户 - 邮箱格式错误
PUT {{baseURL}}/users/{{testUserId}}
Content-Type: application/json

{
    "email": "invalid-email-format",
    "password": "{{updatedPassword}}"
}

###
# 22. 更新用户 - 空对象
PUT {{baseURL}}/users/{{testUserId}}
Content-Type: application/json

{}

###
# 23. 删除用户 - 正常情况
DELETE {{baseURL}}/users/{{testUserId}}

###
# 24. 删除用户 - 不存在的用户ID
DELETE {{baseURL}}/users/{{nonExistentUserId}}

###
# 25. 删除用户 - 无效的用户ID
DELETE {{baseURL}}/users/invalid-id

###
# 26. 删除用户 - 负数ID
DELETE {{baseURL}}/users/-1

###
# 27. 删除用户 - 已删除的用户（重复删除）
DELETE {{baseURL}}/users/{{testUserId}}

###
# 28. 测试不支持的HTTP方法
PATCH {{baseURL}}/users/{{testUserId}}
Content-Type: application/json

{
    "email": "{{updatedEmail}}"
}

###
# 29. 测试 HEAD 请求
HEAD {{baseURL}}/users

###
# 30. 测试 OPTIONS 请求
OPTIONS {{baseURL}}/users

###
# 31. 批量创建用户测试数据
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "batch-test-1@example.com",
    "password": "{{testPassword}}"
}

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "batch-test-2@example.com",
    "password": "{{testPassword}}"
}

###
POST {{baseURL}}/users
Content-Type: application/json

{
    "email": "batch-test-3@example.com",
    "password": "{{testPassword}}"
}